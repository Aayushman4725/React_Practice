React Tutorial

Used for single page application (SPA) -> index.html
Extension = Single React Snippets 
			settings->emmet->Include Language
				item-javascript
				key-javascriptreact

Creating React applications
Code - npx create-react-app (project-name)

Inside src:
	index.js = contains the App.js which is rendered in index.html

	App.js = It is the root component where other components are stacked together itself being the root

package.json = contains the scripts and dependencies used in the project

Start the project
	npm run start

if node modules is deleted to reinstall it - npm install

Components

	Contains:
		Templae
		logic(JS Logic)

By default there is only one component call App being rendered inside the index.js which is from App.js and is being shown through index.html

In a component the function name should start with uppercase

We user jsx to create the component template

In jsx class is reffered to as className for eg <div className = "App"></div>

Shortcut to create class = div.(class_name) : eg : div.content + press TAB

Always export the component for eg: export default App;
Them we can import it in the index.js for eg: import App from './App';


Dynamic value in templates/component

use curly braces for eg: 
const title = 'Welcome'
<h1>{ title }</h1>

We cannot output Boolean or object
eg const person = {name:'yoshi', age:30};

<p>{ person }</p> //this will show error

<p> {[1,2,3,4,5]} </p> //this shows as a string 12345

we can also put in built function
<p> {Math.random() *10 }</p> //this will load random number every time the page is reloaded
we can also use links dynamically in anchor tag
const link = 'www.google.com'
<a href = {link}>Google site</a>

In a react project the components are structured as a tree  where App.js is the root component and the other components are nested.


For eg we create a component Navbar.js

shortcut: sfc + Press TAB //creates an arrow function , we have to name the function for eg Navbar

After creating the component export it and import it in the App.js,
Then, put it inside the div of App as <Navbar />

Similarly create other components: Home


Adding Styles/CSS
By default there already is App.css present in the App.js
There also is index.css which we are going to use as out css file
So, delete the App.css as an error will occur if it is not deleted. We use index.css for style the templates which is imported in index.js so that all the component uses it.


If we want to  further style each tag for eg in \
<a href="/create" style{{
color: "white",
backgroundColor: "Red"
}}
>New BLog</a>
This is called inline styling


Click Events
To handle click events inside the componets we use onClick attribute.

Eg: Inside the component home
const handleClick = (e) => {
console.log('Hello', e);
} 

return(
<div className = "home">
	<h2>Homepage<h2>
	<button onClick = {handleClick}>Click me</button>
</div>
);

In the above code when the click me button is pressed the hello string will be printed along with the e which is the event object that is created by default in every function is printed in the console . The object is e is the first parameter in the function since there are no other parameters.

If we want to add other parameters such as name to show Hello, Aayushman.

const handleClick = (e) => {
console.log('Hello', e);
} 

const handleClickAgain = (name , e) => {
console.log('hello' + name, e.target); // target is an attribute of object e
}
 +
return(
<div className = "home">
	<h2>Homepage<h2>
	<button onClick = {handleClick}>Click me</button>
	<button onClick = {(e) =>handleClickAgain('aayushman', e)}>Click me Again</button>
</div>
);

In the above code, if we put the handleClickAgain function along with the parameters directly the function would be intiated without clicking the button since any paranthesis invokes the function.So, we put the function handleClickAgain inside another anonnymous function (function without a name) which doesnt contain the parameter with paranthesis so, only when the button is clicked will the function be invoked.



Using States
If we want the values inside the tag for eg:<p>{ name }</p> to be reactive i.e if we use a click event to change its value from initial value we have to change its state.

For eg:

import { useState } from "react";


const Home = () => {
    const name = 'mario'
    const age =  25

    const handleClick = () => {
        name = 'luigi'
        age = 30
    }
    return (  
        <div className="home">
            <h2>Home Page</h2>
            <p>Welcome {name}, you are {age} years old.</p>
            <button onClick= {handleClick}>Next</button>
        </div>
    );
}
 
export default Home;

Here in the above code if we click Next the name should be changed to Luigi and age should change to 30 but even if the name and age is changed the change wont be rendered in the page, but if we print it in the console the change wil be shown

This is because the component is not reactive. 
For the component to be reactive we use the useState hook

For eg:

import { useState } from "react";


const Home = () => {
    const [name, setName] = useState('mario');
    const [age, setAge] = useState(25); 

    const handleClick = () => {
        setName('luigi');
        setAge(30);
    }
    return (  
        <div className="home">
            <h2>Home Page</h2>
            <p>Welcome {name}, you are {age} years old.</p>
            <button onClick= {handleClick}>Next</button>
        </div>
    );
}
 
export default Home;

In the above code we import useState from reat and used it to make the component reactive

To use the useState hook we keep it inside a array containing the variable that stores the value for eg : name and a function that changes the value of the variable and allows it to reflect it in the page for eg setName

Now, the component is reactive.


React Developer tool - it is an chrome extension

Outputting Lists

Now to output a list of objects in this case blogs we use the useState hook . As usual we initiate a array with variable named blogs and function named setBlogs.

Then inside the useState function we addan array of objects whichare different blogs having their unique key i.e id.

To display these blogs in the page we first use the variable blogs as {blogs}

To show all the blogs contained in the array we use the in built function map as {blogs.map((blog)=> (
))}

For eg:

import { useState } from "react";


const Home = () => {
    const [blogs, setBlogs] = useState([
        { title: 'My new website', body: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit.', author: 'mario', id: 1 },
        { title: 'Welcome party!', body: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit.', author: 'yoshi', id: 2 },
        { title: 'Web dev top tips', body: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit.', author: 'mario', id: 3 }
    ]);


    return (  
        <div className="home">
            <h2>Home Page</h2>
            {blogs.map((blog) => (
                <div className="blog-preview" key = {blog.id}>
                    <h2>{blog.title}</h2>
                    <p>{blog.body}</p>
                    <p>Written By {blog.author}</p>
                </div>
            ))}
        </div>
    );
}
 
export default Home;

In the above code we use map function to iterate through the list of objects.
In order to show the object we need to add a unique identifier in the tag div which is the key. 
 
the key should be unique for each object so we chose id as the key 

then we can render the attributes of each objects as shown above.


##Props
It  is a way to pass the data from one component to another component 

Now that we have rendered the list of blogs in the home page, the same list could be needed in another pages as well so we make a separate component to list the blogs.

So, we make the BlogList.js component 

const BlogList = (props) => {
    const blogs = props.blogs;
    const title = props.title;
    return ( 
        <div className="blog-list">
            <h2>{title}</h2>
            {blogs.map((blog) => (
                <div className="blog-preview" key = {blog.id}>
                    <h2>{blog.title}</h2>
                    <p>{blog.body}</p>
                    <p>Written By {blog.author}</p>
                </div>
            ))}
        </div>
     );
}
 
export default BlogList;

In the above code we can see that everthing is the same as the home page to render the blog list , except the data is not present. But still the blogs variable is present.

Now , In the home.js we can put the BlogList component as <BlogList /> intead of the whole code

for eg :

import { useState } from "react";
import BlogList from "./BlogList";

const Home = () => {
    const [blogs, setBlogs] = useState([
        { title: 'My new website', body: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit.', author: 'mario', id: 1 },
        { title: 'Welcome party!', body: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit.', author: 'yoshi', id: 2 },
        { title: 'Web dev top tips', body: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit.', author: 'mario', id: 3 }
    ]);


    return (  
        <div className="home">
            <h2>Home Page</h2>
            <BlogList blogs={blogs} title = "All Blogs!!!" />
        </div>
    );
}
 
export default Home;

So, now the code mentioning the variable blogs is in BlogList.js but the data of blogs is still in this Home.js

to use this data we use props

In the BlogList.js, we add props as the parameter as shown above in the BlogList.js
Then we can add the blogs and title as the props as shown above

Then, in the Home.js we can add the blogs and title as the parameter in the BlogList component as <BlogList blogs = { blogs } title = "All Blogs"/>

In the simiar way we use the data contained in different page and render it to the same component using the props

There is more simpler way to use this, which is by destructuring the props without having to initiate the props separately

For eg:

const BlogList = ({blogs,title}) => {
    
    return ( 
        <div className="blog-list">
            <h2>{title}</h2>
            {blogs.map((blog) => (
                <div className="blog-preview" key = {blog.id}>
                    <h2>{blog.title}</h2>
                    <p>{blog.body}</p>
                    <p>Written By {blog.author}</p>
                </div>
            ))}
        </div>
     );
}
 
export default BlogList;

we can directly add the blogs and title as a parameter using the curly braces as dynamic data.

##Reusing the components
Now we can reuse the BlogList component to show datas for different conditions.
For eg: we want a separate list of blogs whose author is mario for that we can use the BlogList component again , but instead of directly using blogs we filter the blogs to show the blogs which is written by mario.
For this we user the filter function which uses a call back function similar to map

For eg:

import { useState } from "react";
import BlogList from "./BlogList";

const Home = () => {
    const [blogs, setBlogs] = useState([
        { title: 'My new website', body: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit.', author: 'mario', id: 1 },
        { title: 'Welcome party!', body: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit.', author: 'yoshi', id: 2 },
        { title: 'Web dev top tips', body: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit.', author: 'mario', id: 3 }
    ]);


    return (  
        <div className="home">
            <h2>Home Page</h2>
            <BlogList blogs={blogs} title = "All Blogs!!!" />
            <BlogList blogs={blogs.filter((blog)=>(blog.author === 'mario'))} title = "Mario's Blogs!!!" />
        </div>
    );
}
 
export default Home;

In the above code we have rendered two blog lists one containing all the blogs and another filtering mario's blog


##Using functions as props
Now, We want to delete the blog.
For that we first add the delete blog button in the bloglist component

For eg:
const BlogList = ({blogs,title,handleDelete}) => {
    
    return ( 
        <div className="blog-list">
            <h2>{title}</h2>
            {blogs.map((blog) => (
                <div className="blog-preview" key = {blog.id}>
                    <h2>{blog.title}</h2>
                    <p>{blog.body}</p>
                    <p>Written By {blog.author}</p>
                    <button onClick ={() => handleDelete(blog.id)}>Delete Blog</button>
                </div>
            ))}
        </div>
     );
}
 
export default BlogList;

Then we write the code for handleDelete function in the page where the data is present.
In this case the data is present in Home.js

So we write the code 
For eg :

import { useState } from "react";
import BlogList from "./BlogList";

const Home = () => {
    const [blogs, setBlogs] = useState([
        { title: 'My new website', body: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit.', author: 'mario', id: 1 },
        { title: 'Welcome party!', body: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit.', author: 'yoshi', id: 2 },
        { title: 'Web dev top tips', body: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit.', author: 'mario', id: 3 }
    ]);

    const handleDelete = (id) => {
        const newBlogs = blogs.filter(blog => blog.id !== id);
        setBlogs(newBlogs);
    }

    return (  
        <div className="home">
            <h2>Home Page</h2>
            <BlogList blogs={blogs} title = "All Blogs!!!" handleDelete={handleDelete}/>
            <BlogList blogs={blogs.filter((blog)=>(blog.author === 'mario'))} title = "Mario's Blogs!!!" handleDelete={handleDelete} />
        </div>
    );
}
 
export default Home;

In the above code a new variable is initialized in the handleDelete function which filters the list of data so that the id which corresponds to the blog which is deleted is removed from the page and state is changed using the setBlogs function.

Then a new parameter is added in the BlogList component which is the handleDelete function.

Of course we have to add the prop handleDelete in BlogList.js as parameter with blogs and title

useEffect
this hook runs a code every time a page is rendered(reload)


For eg:
import { useState, useEffect } from "react";
import BlogList from "./BlogList";

const Home = () => {
    const [blogs, setBlogs] = useState([
        { title: 'My new website', body: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit.', author: 'mario', id: 1 },
        { title: 'Welcome party!', body: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit.', author: 'yoshi', id: 2 },
        { title: 'Web dev top tips', body: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit.', author: 'mario', id: 3 }
    ]);

    const handleDelete = (id) => {
        const newBlogs = blogs.filter(blog => blog.id !== id);
        setBlogs(newBlogs);
    }

    useEffect(()=>{
        console.log('useEffect ran');
        console.log(blogs);
    })

    return (  
        <div className="home">
            <h2>Home Page</h2>
            <BlogList blogs={blogs} title = "All Blogs!!!" handleDelete={handleDelete}/>
            <BlogList blogs={blogs.filter((blog)=>(blog.author === 'mario'))} title = "Mario's Blogs!!!" handleDelete={handleDelete} />
        </div>
    );
}
 
export default Home;

in this code every time I reload the page or every time the page is rendered the useEffect hook runs and the code inside it initiates.
When a button is clicked or when the page is reloaded the code runs and prints in console.

Dependencies
Now for useEffect hook to only run when rendering the page at start or only in a certain condition then we use useEffect dependencies which is essentially an array of which variable should be taken into consideration to run the useEffect hook.

For eg: If I only want to run the useEffect when rendered at start then I can leave an empty array

import { useState, useEffect } from "react";
import BlogList from "./BlogList";

const Home = () => {
    const [blogs, setBlogs] = useState([
        { title: 'My new website', body: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit.', author: 'mario', id: 1 },
        { title: 'Welcome party!', body: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit.', author: 'yoshi', id: 2 },
        { title: 'Web dev top tips', body: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit.', author: 'mario', id: 3 }
    ]);

    const handleDelete = (id) => {
        const newBlogs = blogs.filter(blog => blog.id !== id);
        setBlogs(newBlogs);
    }

    useEffect(()=>{
        console.log('useEffect ran');
        console.log(blogs);
    },[])

    return (  
        <div className="home">
            <h2>Home Page</h2>
            <BlogList blogs={blogs} title = "All Blogs!!!" handleDelete={handleDelete}/>
            <BlogList blogs={blogs.filter((blog)=>(blog.author === 'mario'))} title = "Mario's Blogs!!!" handleDelete={handleDelete} />
        </div>
    );
}
 
export default Home;

If I want to initiate the useEffect hook when I have clicked a specific button then the array should contain the variable whose state will be changed. 
If the state of the variable changes then the useEffect hook will run.

import { useState, useEffect } from "react";
import BlogList from "./BlogList";

const Home = () => {
    const [blogs, setBlogs] = useState([
        { title: 'My new website', body: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit.', author: 'mario', id: 1 },
        { title: 'Welcome party!', body: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit.', author: 'yoshi', id: 2 },
        { title: 'Web dev top tips', body: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit.', author: 'mario', id: 3 }
    ]);
    const [name,setName] = useState('mario');
    const handleDelete = (id) => {
        const newBlogs = blogs.filter(blog => blog.id !== id);
        setBlogs(newBlogs);
    }

    useEffect(()=>{
        console.log('useEffect ran');
        console.log(blogs);
        console.log(name);
    },[name]);

    return (  
        <div className="home">
            <h2>Home Page</h2>
            <BlogList blogs={blogs} title = "All Blogs!!!" handleDelete={handleDelete}/>
            <BlogList blogs={blogs.filter((blog)=>(blog.author === 'mario'))} title = "Mario's Blogs!!!" handleDelete={handleDelete} />
                <button onClick = {()=>setName('luigi')} >Change Name</button>
            <p>{ name }</p>
            
        </div>
    );
}
 
export default Home;

json server
npx json-server --watch data/db.json --port 8000

Now that we know about useEffect.
We can fetch json data from the server and run the useEffect to fetch it once at the start when the page is rendered

The above code runs a demo server that fetch data stored in data folder inside db.json file and then run in port 8000

##Fetching data from the json server
Once we run the server with this code : npx json-server --watch data/db.json --port 8000

we use the fetch function or api inside the useEffect hook to fetch the data from the server using the url endpoint provided by the server :         fetch('http://localhost:8000/blogs')
After that we use .then to return the response object (res) to convert the data into javascript object format using json() as:

.then(res => {
                return res.json();
            })

After that finally we fetch the data, data being the object and we use setBlogs function to render the object: 
.then(data => {
                setBlogs(data);
                console.log(data);
            })

The complete code:

import { useState, useEffect } from "react";
import BlogList from "./BlogList";

const Home = () => {
    const [blogs, setBlogs] = useState(null);
    

    useEffect(()=>{
        
        fetch('http://localhost:8000/blogs')
            .then(res => {
                return res.json();
            })
            .then(data => {
                setBlogs(data);
                console.log(data);
            })
    },[]);

    return (  
        <div className="home">
            <h2>Home Page</h2>
           {blogs && <BlogList blogs={blogs} title = "All Blogs!!!" />}
            {/* <BlogList blogs={blogs.filter((blog)=>(blog.author === 'mario'))} title = "Mario's Blogs!!!" handleDelete={handleDelete} /> */}
        </div>
    );
}
 
export default Home;

In the code the BlogList component is wrapped in curly braces with the ampersand sign. This is a javacript code which means if the blogs return 0 which is the left side of the code then the right side wont work. 
This is called Conditional template
So when the data is fetched the blogs should return 1 only then will the component run.
Also  the blogs is set as null in useState. When the data is fetched using the setBlogs the null is replaced with the data then the code below return runs.

#Conditional template 
As explained above in conditional template if the left side of the code is not true then the right side of the code wont work.
So, lets try to add loading sign.
when the data is being fetched a loading sign will show and when the data is fetched completely the sign disappears.
This can be done by initiating a isPending Boolean variable with the setIsPending function in useState hook.
Initially the value will be true .
Then, in the useEffect hook when the data is fetched the setBlogs function runs to replace the null with data the isPending variable will be set to false.

The conditional template is used to show the loading sign.
Since , inititally the isPending variable is true the loading will show, but when the data is fetched the useEffect hook runs the setIsPending function to set the value to false then the conditional template will see the isPending variable as false and the right side of the code wont work.

Code :

import { useState, useEffect } from "react";
import BlogList from "./BlogList";

const Home = () => {
    const [blogs, setBlogs] = useState(null);
    const[isPending, setIsPending] = useState(true);
    

    useEffect(()=>{
        setTimeout(() => {
             fetch('http://localhost:8000/blogs')
            .then(res => {
                return res.json();
            })
            .then(data => {
                setBlogs(data);
                console.log(data);
                setIsPending(false);
            })
        }, 1000)
       
    },[]);

    return (  
        <div className="home">
            {isPending && <div>Loading...</div>}
           {blogs && <BlogList blogs={blogs} title = "All Blogs!!!" />}
            {/* <BlogList blogs={blogs.filter((blog)=>(blog.author === 'mario'))} title = "Mario's Blogs!!!" handleDelete={handleDelete} /> */}
        </div>
    );
}
 
export default Home;


setTimeout function is used to delay the fetch by 1 sec to make the loading more realistic(don't use it in real project)

Error display
So, when the server or api encounters an error the user should know the type of error they are facing.
For that we use catch which will display the error message if there is any error or if other functions throw some error.

For eg: 

import { useState, useEffect } from "react";
import BlogList from "./BlogList";

const Home = () => {
    const [blogs, setBlogs] = useState(null);
    const[isPending, setIsPending] = useState(true);
    const [error, setError] = useState(null);

    useEffect(()=>{
        setTimeout(() => {
             fetch('http://localhost:8000/blogs')
            .then(res => {
                if(!res.ok){
                    throw Error('Could not fetch the data for that resource');
                }
                return res.json();
            })
            .then(data => {
                setBlogs(data);
                console.log(data);
                setIsPending(false);
                setError(null);
            })
            .catch(err => {
                setError(err.message);
                setIsPending(false);
            })
        }, 1000);
       
    },[]);

    return (  
        <div className="home">
            {error && <div>{error}</div>}
            {isPending && <div>Loading...</div>}
           {blogs && <BlogList blogs={blogs} title = "All Blogs!!!" />}
            {/* <BlogList blogs={blogs.filter((blog)=>(blog.author === 'mario'))} title = "Mario's Blogs!!!" handleDelete={handleDelete} /> */}
        </div>
    );
}
 
export default Home;

Custom Hook

Now that we have used useEffect hook to render the data in the page by fetching it from the server, what if we have other data that can be fetched. For eg if I want to fetch data from Api that sends list of students.

For this I would have to write the code for the useEffect again and again.

But what if we make this whole process a hook and call it whenever necessary.

For this we would have to create a new js file which I have named useFetch.js 
Remember, every time we make a custom hook we have to start with the prefic 'use'

Now in this useFetch.js we will create a arrow function naming it useFetch and inside the function we put the whole useEffect code.
In the fetch api we will remove the hard coded url.
Instead we will put a dynamic variable url as an argument and the useFetch function will also have the url parameter.
Now every time the useFetch hook is called we put the api endpoint url as the parameter and in default the hook will respond with the data,isPending and error variables.

Code :
useFetch.js

import { useState, useEffect } from "react";

   
const useFetch = (url) => {

    const [data, setData] = useState(null);
    const[isPending, setIsPending] = useState(true);
    const [error, setError] = useState(null);

    useEffect(()=>{
            setTimeout(() => {
                 fetch(url)
                .then(res => {
                    if(!res.ok){
                        throw Error('Could not fetch the data for that resource');
                    }
                    return res.json();
                })
                .then(data => {
                    setData(data);
                    console.log(data);
                    setIsPending(false);
                    setError(null);
                })
                .catch(err => {
                    setError(err.message);
                    setIsPending(false);
                })
            }, 1000);
           
        },[url]);

        return {data, isPending, error};
}

export default useFetch;

-------------------------------------------------------------------------------------------------------------------------------------

Home.js

import BlogList from "./BlogList";
import useFetch from "./useFetch";
const Home = () => {
    
   const {data:blogs, isPending, error} = useFetch('http://localhost:8000/blogs');

    return (  
        <div className="home">
            {error && <div>{error}</div>}
            {isPending && <div>Loading...</div>}
           {blogs && <BlogList blogs={blogs} title = "All Blogs!!!" />}
            {/* <BlogList blogs={blogs.filter((blog)=>(blog.author === 'mario'))} title = "Mario's Blogs!!!" handleDelete={handleDelete} /> */}
        </div>
    );
}
 
export default Home;

In the above code the useFetch hook will send the data as variable named data but since we know that the data will be blogs we wrapped the naming of data with blogs use the colon (:) sign as data:blogs.


##React Router

npm install react-router-dom@5

The above code install the react router

When a client sends request to the server it responds with index.html
If the client wants any other url the server responds with the corresponding page but it causes a lot of load in the server.

If we use the react router ,initially when the client sends the request the server responds with js bundle file along with the index.html page 

The js bundle file will contain all the components that have been in react.

When the client request another data the js bundle stops the request from going to the server and sends the response it self since it already contain the component required.

For this we work in the root folder which is the App.js file

For eg:

import NavBar from "./NavBar";
import Home from "./Home";
import { BrowserRouter as Router, Route, Switch } from "react-router-dom/cjs/react-router-dom.min";


function App() {
  return (
   <Router>
    <div className="content">
       <NavBar></NavBar>
      <h1>App Component</h1>
      <Switch>
        <Route path = "/">
          <Home />
        </Route>

      </Switch>
    </div>
    </Router>
  );
}

export default App;


Similarly if we want to create more pages we add the router in the App.js
But when using the path we add the word 'exact' before it to make sure that it doesn't mix the path

for eg if the path we want to go is /create but there is path already containing / then instead of going to /create it will go to /.
So, we use the keyword exact so that user is explicitly asked to only have / as path to go to home.

For eg
import NavBar from "./NavBar";
import Home from "./Home";
import { BrowserRouter as Router, Route, Switch } from "react-router-dom/cjs/react-router-dom.min";
import Create from "./Create";

function App() {
  return (
   <Router>
    <div className="content">
       <NavBar></NavBar>
      <h1>App Component</h1>
      <Switch>
        <Route exact path = "/">
          <Home />
        </Route>
        <Route path = "/create">
          <Create />
        </Route>

      </Switch>
    </div>
    </Router>
  );
}

export default App;

Route Link

Even though we have set the router the server still sends the data every time the client requests it.
For react to intercept the request sent by the client we need a component called Link which see the path to which the button corresponds to and searches for that path in the App.js component and after that the react injects the component to the page

For eg:

import { Link } from 'react-router-dom';

const NavBar = () => {
  return (
    <div className="NavBar">
      <h1>Dojo Blog</h1>
      <nav>
        
        <div className="links">
          <Link to="/">Home</Link>
          <Link to = "/create">New Blog</Link>
        </div>
      </nav>
    </div>
  );
};

export default NavBar;


useEffect cleanup

If we change the page when the fetch operation is initiated but not complete then we get an error as the page which performs the fetch operation is already unmounted or closed when next page is clicked.

To prevent the error from showing we use AbortController to throw an error which will be caught by the api in useEffect hook but since the error will still show even if it is caught we if the conditional statement.

for eg:


import { useState, useEffect } from "react";

   
const useFetch = (url) => {

    const [data, setData] = useState(null);
    const[isPending, setIsPending] = useState(true);
    const [error, setError] = useState(null);

    useEffect(()=>{
            const abortCont = new AbortController();
            setTimeout(() => {
                 fetch(url, {signal: abortCont.signal})
                .then(res => {
                    if(!res.ok){
                        throw Error('Could not fetch the data for that resource');
                    }
                    return res.json();
                })
                .then(data => {
                    setData(data);
                    console.log(data);
                    setIsPending(false);
                    setError(null);
                })
                .catch(err => {
                    if(err.name === 'AbortError'){
                        console.log('Fetch aborted');
                    }else{
                        setError(err.message);
                        setIsPending(false);
                    }
                    
                })
            }, 1000);
           
            return () => abortCont.abort();
        },[url]);

        return {data, isPending, error};
}

export default useFetch;






